rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
  	match /customers/{customerId} {
      allow create: if validateCustomer(request.resource.data);
    }
    
    function validateCustomer(data) {
      return validateData(data.address) && validateData(data.name) 
      			 && validateEmail(data.email); 
    }
    
    // Ensure the data is a non-empty string
    function validateData(data) {
      return data is string && data.size() > 0;
    }

	  // Regex to validate email format
    function validateEmail(email) {
  		return email is string && email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$");
		}
   
  	// Only allow authenticated customers to create pickup requests
    match /pickupRequests/ {documentId} {
      allow create: if request.auth != null &&  get(/databases/$(database)/documents/customers/$(request.auth.uid)).data.role == "Customer";
    }
    
    // match /{document=**} {
    //   allow read, write: if false;
    // }

    match /routes/{routeId} {
      // allow read, update if admin OR driverId is the same as request Id i.e. assigned driver is trying to access
      allow read, update: if request.auth != null && 
                            (resource.data.driverId == 'drivers/' + request.auth.uid || request.auth.token.role == 'Admin')
    }
    
    // Allow add and update drivers ONLY if admin
    match /drivers/{driverId} {
    	allow create, update: if request.auth != null && request.auth.token.role == 'Admin';
    }
    
    //Only allow admin to view and update adminData collection
    match /adminData/ {documentId} {
    	allow read, update: if request.auth != null && request.auth.token.role == 'Admin';
    }
  }
}

